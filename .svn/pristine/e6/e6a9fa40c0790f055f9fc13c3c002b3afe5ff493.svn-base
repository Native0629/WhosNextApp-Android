package com.app.whosnextapp.settings;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.SystemClock;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.AppCompatEditText;
import android.support.v7.widget.AppCompatImageView;
import android.support.v7.widget.AppCompatTextView;
import android.support.v7.widget.Toolbar;
import android.view.MotionEvent;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ProgressBar;

import com.app.whosnextapp.BuildConstants;
import com.app.whosnextapp.R;
import com.app.whosnextapp.apis.APIService;
import com.app.whosnextapp.apis.ConnectionDetector;
import com.app.whosnextapp.apis.ProgressRequestBody;
import com.app.whosnextapp.apis.RetrofitClient;
import com.app.whosnextapp.drawer.HomePageActivity;
import com.app.whosnextapp.model.SnippetModel;
import com.app.whosnextapp.utility.BaseAppCompatActivity;
import com.app.whosnextapp.utility.Globals;
import com.bumptech.glide.Glide;
import com.gun0912.tedpermission.PermissionListener;
import com.gun0912.tedpermission.TedPermission;
import com.orhanobut.logger.Logger;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import pl.aprilapps.easyphotopicker.DefaultCallback;
import pl.aprilapps.easyphotopicker.EasyImage;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class AudioActivity extends BaseAppCompatActivity implements View.OnClickListener, View.OnTouchListener, ProgressRequestBody.UploadCallbacks {
    @BindView(R.id.toolbar)
    Toolbar toolbar;
    @BindView(R.id.toolbar_title)
    AppCompatTextView toolbar_title;
    @BindView(R.id.et_snippet_details)
    AppCompatEditText et_snippet_details;
    @BindView(R.id.iv_snippet_image)
    AppCompatImageView iv_snippet_image;
    @BindView(R.id.ll_upload_snippet_progress)
    LinearLayout ll_upload_snippet_progress;
    @BindView(R.id.progress_uploading)
    ProgressBar progress_uploading;
    @BindView(R.id.iv_record)
    AppCompatImageView iv_record;
    @BindView(R.id.tv_timer)
    AppCompatTextView tv_timer;

    MediaRecorder mediaRecorder = null;
    String imageFile, selectedAudioPath;
    long mStartTime = 0;
    private int[] amplitudes = new int[100];
    private int i = 0;
    private String file_exist[] = {".3gp", ".mp4"};
    Globals globals;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_audio);
        init();
    }

    @SuppressLint("ClickableViewAccessibility")
    private void init() {
        ButterKnife.bind(this);
        setActionBar();
        globals = (Globals) getApplicationContext();
        iv_record.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        startRecording();
                        break;
                    case MotionEvent.ACTION_UP:
                        stopRecording();
                        break;
                }
                return false;
            }
        });
    }

    private void setActionBar() {
        toolbar.setBackgroundResource(R.drawable.header_bg);
        setSupportActionBar(toolbar);
        toolbar_title.setText(R.string.setting);
        setTitle("");
        toolbar.setNavigationIcon(R.drawable.backarrow);
        toolbar.setNavigationOnClickListener(this);
    }

    private Activity getActivity() {
        return AudioActivity.this;
    }

    private Handler handler = new Handler();
    private Runnable runnable = new Runnable() {
        @Override
        public void run() {
            tick();
            handler.postDelayed(runnable, 100);
        }
    };

    private void tick() {
        long time = (mStartTime < 0) ? 0 : (SystemClock.elapsedRealtime() - mStartTime);
        int minutes = (int) (time / 60000);
        int seconds = (int) (time / 1000) % 60;
        tv_timer.setText("0" + minutes + ":" + (seconds < 10 ? "0" + seconds : seconds));
        if (mediaRecorder != null) {
            amplitudes[i] = mediaRecorder.getMaxAmplitude();
            if (i >= amplitudes.length - 1) {
                i = 0;
            } else {
                ++i;
            }
        }
    }

    @OnClick(R.id.iv_snippet_image)
    public void onSnippetImageClick() {
        PermissionListener permissionlistener = new PermissionListener() {
            @Override
            public void onPermissionGranted() {
                showImageDialog();
            }

            @Override
            public void onPermissionDenied(ArrayList<String> deniedPermissions) {
                Globals.showToast(getActivity(), getString(R.string.permission_denied) + deniedPermissions.toString());
            }
        };
        TedPermission.with(getActivity())
                .setPermissionListener(permissionlistener)
                .setRationaleMessage(getString(R.string.request_camera_permission))
                .setDeniedMessage(getString(R.string.on_denied_permission))
                .setGotoSettingButtonText(getString(R.string.setting))
                .setPermissions(Manifest.permission.CAMERA, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                .check();
    }

    private void showImageDialog() {
        CharSequence[] options = new CharSequence[]{getResources().getString(R.string.text_camera), getResources().getString(R.string.text_gallery)};
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), R.style.AlertDialogTheme);
        builder.setTitle(R.string.text_browse_image);
        builder.setNeutralButton(R.string.cancel, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        builder.setItems(options, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int item) {
                switch (item) {
                    case 0:
                        openCameraForImage();
                        break;
                    case 1:
                        openGalleryForImage();
                        break;
                }
            }
        });
        builder.show();
    }

    private void openGalleryForImage() {
        EasyImage.openGallery(getActivity(), 0);
    }

    private void openCameraForImage() {
        EasyImage.openCamera(getActivity(), 0);
    }

    @Override
    public void onClick(View v) {
        startActivity(new Intent(getActivity(), HomePageActivity.class));
    }

    private void stopRecording() {
        if (mediaRecorder != null) {
            mediaRecorder.stop();
            mediaRecorder.reset();
            mediaRecorder.release();
            mediaRecorder = null;
            mStartTime = 0;
            handler.removeCallbacks(runnable);
        }
    }

    private void startRecording() {
        mediaRecorder = new MediaRecorder();
        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
        mediaRecorder.setMaxDuration(6000);
        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);
        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);
        mediaRecorder.setOutputFile(getFilename());
        try {
            mediaRecorder.prepare();
            mediaRecorder.start();
            mStartTime = SystemClock.elapsedRealtime();
            handler.postDelayed(runnable, 100);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String getFilename() {
        String filepath = Environment.getExternalStorageDirectory().getPath();
        File file = new File(filepath, "AudioRecorder");
        if (!file.exists()) {
            file.mkdirs();
        }
        return (file.getAbsolutePath() + "/" + System.currentTimeMillis() + file_exist[0]);
    }

    @OnClick(R.id.btn_save)
    public void onSnippetUpload() {
        if (imageFile != null && imageFile.length() > 0) {
            if (ll_upload_snippet_progress.getVisibility() != View.VISIBLE) {
                doRequestToUploadSnippetAudio();
            }
        }
    }

    private void doRequestToUploadSnippetAudio() {
        if (ConnectionDetector.internetCheck(getActivity(), true)) {
            ll_upload_snippet_progress.setVisibility(View.VISIBLE);
            APIService mApiService = RetrofitClient.getClient(BuildConstants.BASE_URL).create(APIService.class);

            File selected_image = new File(imageFile);

            File selected_audio = new File(selectedAudioPath);

            RequestBody requestFile = RequestBody.create(MediaType.parse("image/*"), selected_image);
            MultipartBody.Part bodyImage = MultipartBody.Part.createFormData("SnippetsImage", selected_image.getName(), requestFile);

            ProgressRequestBody requestBodyAudio = new ProgressRequestBody(selected_audio, "audio/*", this);
            MultipartBody.Part bodyAudio = MultipartBody.Part.createFormData("SnippetsVideo", selected_audio.getName(), requestBodyAudio);

            RequestBody SnippetsCaption = RequestBody.create(MediaType.parse("text/plain"), et_snippet_details.getText().toString());

            String requestURL = String.format(getString(R.string.upload_snippet), globals.getUserDetails().getStatus().getCustomerId(), 3);

            Call<SnippetModel> call = mApiService.GetSnippetAudioPost(globals.getUserDetails().getStatus().getUserId(), requestURL, bodyAudio, bodyImage, SnippetsCaption);

            call.enqueue(new Callback<SnippetModel>() {
                @Override
                public void onResponse(@NonNull Call<SnippetModel> call, @NonNull Response<SnippetModel> response) {
                    ll_upload_snippet_progress.setVisibility(View.GONE);
                    if (response.isSuccessful() && response.body() != null) {
                        Globals.showToast(getActivity(), getString(R.string.msg_snippet_picture_shared));
                        startActivity(new Intent(getActivity(), HomePageActivity.class));
                        getActivity().finish();
                    } else {
                        Globals.showToast(getActivity(), response.message());
                    }
                }

                @Override
                public void onFailure(@NonNull Call<SnippetModel> call, @NonNull Throwable t) {
                    ll_upload_snippet_progress.setVisibility(View.GONE);
                    Logger.e("onFailure, " + t.getMessage());
                    Globals.showToast(getActivity(), getString(R.string.msg_server_error));
                }
            });
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        EasyImage.handleActivityResult(requestCode, resultCode, data, getActivity(), new DefaultCallback() {
            @Override
            public void onImagesPicked(@NonNull List<File> imageFiles, EasyImage.ImageSource source, int type) {
                if (!imageFiles.isEmpty()) {
                    imageFile = imageFiles.get(0).getPath();
                    Glide.with(getActivity())
                            .load(imageFile)
                            .into(iv_snippet_image);
                }
            }

            @Override
            public void onCanceled(EasyImage.ImageSource source, int type) {
                if (source == EasyImage.ImageSource.CAMERA) {
                    File photoFile = EasyImage.lastlyTakenButCanceledPhoto(getActivity());
                    if (photoFile != null) {
                        photoFile.delete();
                    }
                }
            }
        });
    }

    @SuppressLint("ClickableViewAccessibility")
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            startRecording();
        } else if (event.getAction() == MotionEvent.ACTION_UP) {
            stopRecording();
        }
        return false;
    }

    @Override
    public void onProgressUpdate(int percentage) {
        progress_uploading.setProgress(percentage);
    }

    @Override
    public void onError() {
        Globals.showToast(getActivity(), getString(R.string.msg_server_error));
    }

    @Override
    public void onFinish() {
        progress_uploading.setProgress(100);
    }
}
