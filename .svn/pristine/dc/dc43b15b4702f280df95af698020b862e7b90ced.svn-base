package com.app.whosnextapp;

import android.content.Context;
import android.graphics.Color;
import android.support.annotation.NonNull;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.RelativeLayout;

import com.app.whosnextapp.model.GetAllDashboardData;
import com.joker.pager.BannerPager;
import com.joker.pager.PagerOptions;
import com.joker.pager.holder.ViewHolderCreator;

import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;
import im.ene.toro.widget.PressablePlayerSelector;

public class ExoplayerAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements Filterable {

    private Context context;
    private ArrayList<GetAllDashboardData.DashboardList> dashboardList;
    private ArrayList<GetAllDashboardData.DashboardList> mFilterDashboardData;
    private ArrayList<GetAllDashboardData.SnippetsList> snippetsLists;
    private OnItemClick onItemClick;

    private static final int LAYOUT_BANNER = 0;
    private static final int LAYOUT_FEED = 1;
    private static final int LAYOUT_GROUP_FEED = 2;

    private final PressablePlayerSelector selector;

    ExoplayerAdapter(Context context, ArrayList<GetAllDashboardData.SnippetsList> snippetsLists, @NonNull PressablePlayerSelector selector, OnItemClick onItemClick) {
        this.context = context;
        this.snippetsLists = snippetsLists;
        this.selector = selector;
        this.onItemClick = onItemClick;
    }

    public void doRefresh(ArrayList<GetAllDashboardData.DashboardList> dashboardList) {
        this.dashboardList = dashboardList;
        this.mFilterDashboardData = dashboardList;
        notifyDataSetChanged();
    }

    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                String charString = constraint.toString();
                if (charString.isEmpty()) {
                    mFilterDashboardData = dashboardList;
                } else {
                    ArrayList<GetAllDashboardData.DashboardList> filteredList = new ArrayList<>();
                    for (GetAllDashboardData.DashboardList row : dashboardList) {
                        if (row.getUserName().toLowerCase().contains(charString.toLowerCase())) {
                            filteredList.add(row);
                        }
                    }
                    mFilterDashboardData = filteredList;
                }
                FilterResults filterResults = new FilterResults();
                filterResults.values = mFilterDashboardData;
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                mFilterDashboardData = (ArrayList<GetAllDashboardData.DashboardList>) results.values;
                onItemClick.onFilter(mFilterDashboardData != null);
                notifyDataSetChanged();
            }
        };
    }

    public interface OnItemClick {

        void onClickProfile(int i);

        void onClickUsername(int i);

        void onClickLike(GetAllDashboardData.DashboardList DashboardDataList, int i);

        void displayComment(int i);

        void onClickShareIcon();

        void onClickOptionIcon();

        void likeDisplay(int i);

        void displayAllComments(int i);

        void onClickAddComment(int i);

        void onClickSmallUsername(int i);

        void onClickSmallProfile(int i);

        void onFilter(boolean IsShow);

      /*  void viewAllComments(GetAllDashboardData.DashboardList DashboardDataList, int i);

        void requestForView(GetAllDashboardData.DashboardList DashboardDataList, int i);

        */
    }

    @Override
    public int getItemViewType(int position) {
        if (isPositionHeader(position)) {
            return LAYOUT_BANNER;
        } else if (isPositionGroupVideo(position)) {
            return LAYOUT_GROUP_FEED;
        }
        return LAYOUT_FEED;
    }

    private boolean isPositionHeader(int position) {
        return position == 0;
    }

    private boolean isPositionGroupVideo(int position) {
        return mFilterDashboardData.get(position - 1).getIsGroupVideo();
    }

    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        View view;
        RecyclerView.ViewHolder viewHolder;
        if (viewType == LAYOUT_BANNER) {
            view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_banner, parent, false);
            viewHolder = new BannerViewHolder(view);
        } else if (viewType == LAYOUT_GROUP_FEED) {
            view = LayoutInflater.from(parent.getContext()).inflate(R.layout.layout_group_video, parent, false);
            viewHolder = new GroupVideoViewHolder(context, view, selector, onItemClick);
        } else {
            view = LayoutInflater.from(parent.getContext()).inflate(ExoPlayerViewHolder.LAYOUT_RES, parent, false);
            viewHolder = new ExoPlayerViewHolder(context, view, selector, onItemClick);
            viewHolder.itemView.setOnLongClickListener(this.selector);
        }
        return viewHolder;
    }

    @Override
    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, int i) {
        if (viewHolder.getItemViewType() == LAYOUT_BANNER) {
            BannerViewHolder holder = (BannerViewHolder) viewHolder;
            holder.setBannerSnippet(snippetsLists);
        } else if (viewHolder.getItemViewType() == LAYOUT_FEED) {
            ExoPlayerViewHolder holder = (ExoPlayerViewHolder) viewHolder;
            holder.bind(mFilterDashboardData.get(i - 1));
        } else if (viewHolder.getItemViewType() == LAYOUT_GROUP_FEED) {
            GroupVideoViewHolder holder = (GroupVideoViewHolder) viewHolder;
            holder.bind(mFilterDashboardData.get(i - 1));
        }
    }

    @Override
    public int getItemCount() {
        return mFilterDashboardData == null ? 1 : mFilterDashboardData.size() + 1;
    }

    class BannerViewHolder extends RecyclerView.ViewHolder {

        @BindView(R.id.banner_snippet)
        BannerPager banner_snippet;
        private PagerOptions pagerOptions;

        BannerViewHolder(@NonNull View itemView) {
            super(itemView);
            ButterKnife.bind(this, itemView);

            pagerOptions = new PagerOptions.Builder(context)
                    .setTurnDuration(5000)
                    .setIndicatorColor(Color.GRAY, Color.RED)
                    .setIndicatorSize(16)
                    .setPagePadding(40)
                    .setPrePagerWidth(150)
                    .setIndicatorAlign(RelativeLayout.CENTER_IN_PARENT)
                    .build();
        }

        void setBannerSnippet(ArrayList<GetAllDashboardData.SnippetsList> dataIntoBanner) {
            banner_snippet.setPagerOptions(pagerOptions).setPages(dataIntoBanner,
                    new ViewHolderCreator<BannerPagerHolder>() {
                        @Override
                        public BannerPagerHolder createViewHolder() {
                            final View view = LayoutInflater.from(context).inflate(R.layout.item_image_banner, null);
                            return new BannerPagerHolder(context, view);
                        }
                    });
            banner_snippet.startTurning();
        }

    }

}

