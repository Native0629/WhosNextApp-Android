package com.app.whosnextapp.quickblox.helper;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.content.LocalBroadcastManager;

import com.app.whosnextapp.R;
import com.app.whosnextapp.apis.ConnectionDetector;
import com.app.whosnextapp.quickblox.utils.QbDialogHolder;
import com.app.whosnextapp.utility.Constants;
import com.app.whosnextapp.utility.Globals;
import com.bumptech.glide.Glide;
import com.bumptech.glide.Priority;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.request.target.SimpleTarget;
import com.bumptech.glide.request.transition.Transition;
import com.quickblox.chat.QBRestChatService;
import com.quickblox.chat.model.QBAttachment;
import com.quickblox.chat.model.QBChatDialog;
import com.quickblox.chat.model.QBChatMessage;
import com.quickblox.content.QBContent;
import com.quickblox.content.model.QBFile;
import com.quickblox.core.QBEntityCallback;
import com.quickblox.core.QBProgressCallback;
import com.quickblox.core.exception.QBResponseException;

import org.jivesoftware.smack.SmackException;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;

import static com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade;

public class ChatMessageUploadFile {
    private Activity context;
    private File file;
    private QBChatMessage qbChatMessage;
    private QBChatDialog qbChatDialog;
    private Globals globals;
    private String DbId;
    private String height = null, width = null;
    private String type = Constants.WN_QBChat_Msg_Att_Image;

    public ChatMessageUploadFile(Activity context, File file, QBChatDialog qbChatDialog, QBChatMessage qbChatMessage, String DbId) {
        this.context = context;
        this.file = file;
        this.qbChatDialog = qbChatDialog;
        this.DbId = DbId;
        this.qbChatMessage = qbChatMessage;
        globals = (Globals) context.getApplicationContext();
    }

    //upload attachement
    public void uploadFile() {
        if (!ConnectionDetector.internetCheck(context, true))
            return;
        sendBrodcast(0);
        QBContent.uploadFileTask(file, true, null, new QBProgressCallback() {
            @Override
            public void onProgressUpdate(int progress) {
                if (progress > 0 && progress != 100) {
                    sendBrodcast(progress);
                }
            }
        }).performAsync(new QBEntityCallback<QBFile>() {
            @Override
            public void onSuccess(QBFile qbFile, Bundle params) {
                updateMessage(qbChatMessage, qbFile.getUid());
            }

            @Override
            public void onError(QBResponseException error) {
                Intent intentNotify = new Intent(Constants.WN_NotifyAdapter).putExtra(Constants.WN_ChatDBID, DbId);
                LocalBroadcastManager.getInstance(context).sendBroadcast(intentNotify);
            }
        });
    }

    /**
     * created message delete and send new message attachment id
     *
     * @param qbChatMessage current message that is deleted
     * @param UId           attachment blob id
     */
    public void updateMessage(final QBChatMessage qbChatMessage, final String UId) {
        sendBrodcast(0);
        setHeightWidth(qbChatMessage, UId);
    }

    private void sendMessage(final String UId, final String ThumbUId) {
        QBRestChatService.deleteMessage(qbChatMessage.getId(), true).performAsync(new QBEntityCallback<Void>() {
            @Override
            public void onSuccess(Void aVoid, Bundle bundle) {
                final QBChatMessage qbChatMessage = new QBChatMessage();
                qbChatMessage.setProperty(Constants.WN_USERNAME, globals.getUserDetails().getStatus().getUserName() == null ? "" : globals.getUserDetails().getStatus().getUserName());
                qbChatMessage.setDialogId(qbChatDialog.getDialogId());
                qbChatMessage.setSenderId(ChatHelper.getCurrentUser().getId());
                qbChatMessage.setProperty(Constants.WN_PROPERTY_SAVE_TO_HISTORY, "1");
                qbChatMessage.setProperty(Constants.WN_USER_ID, String.valueOf(globals.getUserDetails().getStatus().getUserId()));
                qbChatMessage.setDateSent(System.currentTimeMillis() / 1000);
                qbChatMessage.setMarkable(true);
                qbChatMessage.setProperty(Constants.WN_Chat_File_Width, width);
                qbChatMessage.setProperty(Constants.WN_Chat_File_Height, height);
                qbChatMessage.setId(DbId);

                qbChatMessage.setProperty(Constants.WN_ChatDBID, DbId);
                if (type.equalsIgnoreCase(Constants.WN_QBChat_Msg_Att_Image)) {
                    qbChatMessage.setBody(context.getString(R.string.msg_for_image_attachment));
                }
                if (!ThumbUId.isEmpty()) {
                    qbChatMessage.setProperty(Constants.WN_Chat_Thumb, ThumbUId);
                }
                ArrayList<QBAttachment> qbAttachments = new ArrayList<>();
                final QBAttachment attachment = new QBAttachment(type);
                attachment.setId(UId);
                qbAttachments.add(attachment);
                qbChatMessage.setAttachments(qbAttachments);
                try {
                    qbChatDialog.sendMessage(qbChatMessage);
                    QbDialogHolder.getInstance().updateDialog(qbChatMessage);
                    sendBrodcast(100);
                } catch (SmackException.NotConnectedException e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onError(QBResponseException e) {

            }
        });
    }

    private void setHeightWidth(QBChatMessage qbChatMessage, String Uid) {
        for (QBAttachment attachment : qbChatMessage.getAttachments()) {
            type = attachment.getType();
        }
        switch (type) {
            case Constants.WN_QBChat_Msg_Att_Image:
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inJustDecodeBounds = true;
                BitmapFactory.decodeFile(file.getAbsolutePath(), options);
                width = String.valueOf(options.outWidth);
                height = String.valueOf(options.outHeight);
                break;
        }
        uploadThumb(type, Uid);
    }

    @SuppressLint("CheckResult")
    private void uploadThumb(final String type, final String uid) {
        RequestOptions requestOptions = new RequestOptions();
        requestOptions.diskCacheStrategy(DiskCacheStrategy.RESOURCE);
        requestOptions.override(Integer.parseInt(width), Integer.parseInt(height));
        requestOptions.fitCenter();
        requestOptions.frame(Constants.WN_Chat_File_Video_Thumbnail_Freme);
        requestOptions.priority(Priority.HIGH);
        requestOptions.disallowHardwareConfig();
        requestOptions.dontAnimate().dontTransform();
        Glide.with(Globals.getContext())
                .load(file.getAbsolutePath())
                .transition(withCrossFade())
                .apply(requestOptions)
                .into(new SimpleTarget<Drawable>() {
                    @Override
                    public void onLoadFailed(@Nullable Drawable errorDrawable) {
                        super.onLoadFailed(errorDrawable);
                        sendMessage(uid, "");
                    }

                    @Override
                    public void onResourceReady(@NonNull Drawable resource, @Nullable Transition<? super Drawable> transition) {
                        try {
                            Bitmap bitmap = ((BitmapDrawable) resource).getBitmap();
                            File file = getFile(bitmap);
                            if (file != null) {
                                QBContent.uploadFileTask(file, true, null, new QBProgressCallback() {
                                    @Override
                                    public void onProgressUpdate(int i) {

                                    }
                                }).performAsync(new QBEntityCallback<QBFile>() {
                                    @Override
                                    public void onSuccess(QBFile qbFile, Bundle bundle) {
                                        sendMessage(uid, qbFile.getUid());
                                    }

                                    @Override
                                    public void onError(QBResponseException e) {
                                        sendMessage(uid, "");
                                    }
                                });
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            sendMessage(uid, "");
                        }
                    }
                });
    }

    private File getFile(Bitmap bitmap) {
        try {
            File f = new File(context.getCacheDir(), DbId + Constants.WN_EXT_IMAGE_JPG);
            if (f.exists()) {
                f.delete();
            }
            f.createNewFile();
            //Convert bitmap to byte array
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            bitmap.compress(Bitmap.CompressFormat.JPEG, 100, bos);
            byte[] bitmapdata = bos.toByteArray();

            //write the bytes in file
            FileOutputStream fos = new FileOutputStream(f);
            fos.write(bitmapdata);
            fos.flush();
            fos.close();
            return f;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private void sendBrodcast(int progress) {
        Intent intentNotify = new Intent(Constants.WN_NotifyAdapter).putExtra(Constants.WN_ChatDBID, DbId).putExtra(Constants.WN_Media_Progress, progress);
        LocalBroadcastManager.getInstance(context).sendBroadcast(intentNotify);
    }
}
