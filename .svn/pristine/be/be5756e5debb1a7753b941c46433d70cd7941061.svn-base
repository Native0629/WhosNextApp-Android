package com.app.whosnextapp.drawer;


import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;

import com.app.whosnextapp.R;
import com.app.whosnextapp.apis.PostRequest;
import com.app.whosnextapp.apis.ResponseListener;
import com.app.whosnextapp.model.GetAllPostByCustomerIDModel;
import com.app.whosnextapp.model.LikeUnlikePostModel;
import com.app.whosnextapp.model.ViewPostModel;
import com.app.whosnextapp.navigationmenu.OtherUserProfileActivity;
import com.app.whosnextapp.notification.NotificationActivity;
import com.app.whosnextapp.notification.ProfileVideoPlayerActivity;
import com.app.whosnextapp.pictures.CommentActivity;
import com.app.whosnextapp.pictures.LikePostActivity;
import com.app.whosnextapp.utility.Constants;
import com.app.whosnextapp.utility.Globals;
import com.google.gson.Gson;

import java.util.ArrayList;

import butterknife.BindView;
import butterknife.ButterKnife;

public class TabFeedFragment extends Fragment implements TabFeedAdapter.OnItemClick {
    @BindView(R.id.rv_feeds)
    RecyclerView rv_feeds;

    Globals globals;
    TabFeedAdapter tabFeedAdapter;
    private ArrayList<GetAllPostByCustomerIDModel.PostList> postLists = new ArrayList<>();
    int likeCount, IsLike;

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.fragment_tab_feed, container, false);
        setHasOptionsMenu(true);
        ButterKnife.bind(this, v);
        init();
        return v;
    }

    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        doRequestForGetFeed();
    }

    private void init() {
        if (getActivity() != null) {
            globals = (Globals) getActivity().getApplicationContext();
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        doRequestForGetFeed();
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.home_page_menu, menu);
    }

    @Override
    public void onPrepareOptionsMenu(Menu menu) {
        menu.findItem(R.id.header_bell).setVisible(true);
        menu.findItem(R.id.header_refresh).setVisible(true);
        menu.findItem(R.id.header_search).setVisible(false);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.header_refresh:
                doRequestForGetFeed();
                break;
            case R.id.header_bell:
                startActivity(new Intent(getContext(), NotificationActivity.class));
                break;
        }
        return false;
    }

    private void doRequestForGetFeed() {
        String requestURL = String.format(getString(R.string.get_all_postBy_CustomerID), 1);

        new PostRequest(getActivity(), null, requestURL, true, true, new ResponseListener() {
            @Override
            public void onSucceedToPostCall(String response) {
                GetAllPostByCustomerIDModel getAllPostByCustomerIDModel = new Gson().fromJson(response, GetAllPostByCustomerIDModel.class);
                if (getAllPostByCustomerIDModel != null && getAllPostByCustomerIDModel.getPostLists() != null && !getAllPostByCustomerIDModel.getPostLists().isEmpty()) {
                    postLists = getAllPostByCustomerIDModel.getPostLists();
                    setFeedPostAdapter();
                }
            }

            @Override
            public void onFailedToPostCall(int statusCode, String msg) {

            }
        }).execute(globals.getUserDetails().getStatus().getUserId());

    }

    private void setFeedPostAdapter() {
        if (tabFeedAdapter == null && getContext() != null) {
            tabFeedAdapter = new TabFeedAdapter(getContext(), this);
        }
        if (rv_feeds.getAdapter() == null) {
            rv_feeds.setLayoutManager(new LinearLayoutManager(getContext()));
            rv_feeds.setAdapter(tabFeedAdapter);
        }
        tabFeedAdapter.doRefresh(postLists);
    }

    @Override
    public void onClickShareIcon() {
        Globals.showToast(getContext(), getResources().getString(R.string.text_coming_soon));
    }

    @Override
    public void onClickOptionIcon() {
        Globals.showToast(getContext(), getResources().getString(R.string.text_coming_soon));
    }

    @Override
    public void onClickAddComment(int i) {
        Intent intent = new Intent(getContext(), CommentActivity.class);
        intent.putExtra(Constants.WN_POST_ID, String.valueOf(postLists.get(i).getId()));
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void likeDisplay(int i) {
        Intent intent = new Intent(getContext(), LikePostActivity.class);
        intent.putExtra(Constants.WN_POST_ID, String.valueOf(postLists.get(i).getId()));
        startActivity(intent);
    }

    @Override
    public void displayAllComments(int i) {
        Intent intent = new Intent(getContext(), CommentActivity.class);
        intent.putExtra(Constants.WN_POST_ID, String.valueOf(postLists.get(i).getId()));
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void displayComment(int i) {
        Intent intent = new Intent(getContext(), CommentActivity.class);
        intent.putExtra(Constants.WN_POST_ID, String.valueOf(postLists.get(i).getId()));
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void onClickUsername(int i) {
        Intent intent = new Intent(getContext(), OtherUserProfileActivity.class);
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void onClickProfile(int i) {
        Intent intent = new Intent(getContext(), ProfileVideoPlayerActivity.class);
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void onClickSmallProfile(int i) {
        Intent intent = new Intent(getContext(), ProfileVideoPlayerActivity.class);
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void onClickSmallUsername(int i) {
        Intent intent = new Intent(getContext(), OtherUserProfileActivity.class);
        intent.putExtra(Constants.WN_CUSTOMER_ID, postLists.get(i).getCustomerId());
        startActivity(intent);
    }

    @Override
    public void requestForView(final GetAllPostByCustomerIDModel.PostList postList, int i) {
        String requestURL = String.format(getString(R.string.view_post), postList.getCustomerId());
        new PostRequest(getActivity(), null, requestURL, false, true, new ResponseListener() {
            @Override
            public void onSucceedToPostCall(String response) {
                ViewPostModel viewPostModel = new Gson().fromJson(response, ViewPostModel.class);
                if (viewPostModel != null) {
                    if (viewPostModel.getResult().getResult()) {
                        postList.setTotalViews(viewPostModel.getResult().getTotalViews());
                    }
                }
            }

            @Override
            public void onFailedToPostCall(int statusCode, String msg) {

            }
        }).execute(globals.getUserDetails().getStatus().getUserId());
    }

    @Override
    public void onClickLike(final GetAllPostByCustomerIDModel.PostList postList, final int i) {
        likeCount = postLists.get(i).getTotalLikes();
        if (postLists.get(i).getIsLiked() && likeCount != 0) {
            likeCount = likeCount - 1;
            IsLike = 0;
        } else {
            likeCount = likeCount + 1;
            IsLike = 1;
        }
        String requestURL = String.format(getString(R.string.like_unlike_post), String.valueOf(postLists.get(i).getId()), IsLike);
        new PostRequest(getActivity(), null, requestURL, false, true, new ResponseListener() {
            @Override
            public void onSucceedToPostCall(String response) {
                LikeUnlikePostModel likeUnlikePostModel = new Gson().fromJson(response, LikeUnlikePostModel.class);
                if (likeUnlikePostModel != null && likeUnlikePostModel.getResult().equals(Constants.WN_SUCCESS)) {
                    postLists.get(i).setTotalLikes(likeCount);
                    postLists.get(i).setIsLiked(IsLike == 1);
                    tabFeedAdapter.notifyItemChanged(i, postList);
                }
            }

            @Override
            public void onFailedToPostCall(int statusCode, String msg) {
                Globals.showToast(getContext(), msg);
            }
        }).execute(globals.getUserDetails().getStatus().getUserId());
    }
}


